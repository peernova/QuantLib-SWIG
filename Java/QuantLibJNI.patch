--- QuantLibJNI.java
+++ /root/QuantLibJNI.java
@@ -8,12 +8,57 @@
 
 package org.quantlib;
 
+import java.io.File;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.io.BufferedOutputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.net.URL;
+
 public class QuantLibJNI {
 
-  /// Load the JNI library
-  static {
-    System.loadLibrary("QuantLibJNI");
-  }
+    /// Load the JNI library
+    static {
+        String os = System.getProperty("os.name").replace(" ", "").toLowerCase();
+        os = os.replaceAll("macosx", "darwin");
+        String arch = System.getProperty("os.arch").replace("-", "_").toLowerCase();
+        arch = arch.replaceAll("aarch", "arm").replaceAll("x86_64", "amd64");
+        String[] fileTypes = new String[]{"so", "dylib", "jnilib"};
+        String[] libs = {"libQuantLib", "libQuantLibJNI"};
+        String quantLibPath = System.getenv("QUANTLIB_LIBRARY_PATH");
+        if (quantLibPath.isEmpty()) {
+           quantLibPath = "/tmp";
+        }
+        for (String lib : libs) {
+            URL asset = null;
+            String ext = null;
+            for (String type : fileTypes) {
+                String name = String.format("/libraries/%s/%s/%s.%s", os, arch, lib, type);
+                asset = QuantLibJNI.class.getResource(name);
+                if (asset != null) {
+                    ext = type;
+                    break;
+                }
+            }
+            if (asset != null) {
+                try {
+                    final File libFile = new File(String.format("%s/%s.%s", quantLibPath, lib, ext));
+                    final InputStream in = asset.openStream();
+                    final OutputStream out = new BufferedOutputStream(new FileOutputStream(libFile));
+
+                    int len = 0;
+                    byte[] buffer = new byte[8192];
+                    while ((len = in.read(buffer)) > -1)
+                        out.write(buffer, 0, len);
+                    out.close();
+                    in.close();
+                    System.load(libFile.getAbsolutePath());
+                } catch (IOException ignore) {
+                }
+            }
+        }
+    }
 
   public final static native long new_OptionalBool(boolean jarg1);
   public final static native void delete_OptionalBool(long jarg1);
